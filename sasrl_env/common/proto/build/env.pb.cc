// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: env.proto

#include "env.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ServerInfo::ServerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
PROTOBUF_CONSTEXPR MetaData::MetaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.envversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaDataDefaultTypeInternal() {}
  union {
    MetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaDataDefaultTypeInternal _MetaData_default_instance_;
PROTOBUF_CONSTEXPR Name::Name(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wrapper_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.render_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NameDefaultTypeInternal() {}
  union {
    Name _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NameDefaultTypeInternal _Name_default_instance_;
PROTOBUF_CONSTEXPR Info::Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.observation_space_)*/{}
  , /*decltype(_impl_.action_space_)*/{}
  , /*decltype(_impl_.max_episode_steps_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoDefaultTypeInternal() {}
  union {
    Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoDefaultTypeInternal _Info_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKV_SMapEntry_DoNotUse::StepInfoKV_SMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StepInfoKV_SMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKV_SMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKV_SMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StepInfoKV_SMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKV_SMapEntry_DoNotUseDefaultTypeInternal _StepInfoKV_SMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKV_IMapEntry_DoNotUse::StepInfoKV_IMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StepInfoKV_IMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKV_IMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKV_IMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StepInfoKV_IMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKV_IMapEntry_DoNotUseDefaultTypeInternal _StepInfoKV_IMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKV_FMapEntry_DoNotUse::StepInfoKV_FMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StepInfoKV_FMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKV_FMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKV_FMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StepInfoKV_FMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKV_FMapEntry_DoNotUseDefaultTypeInternal _StepInfoKV_FMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKV_BMapEntry_DoNotUse::StepInfoKV_BMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StepInfoKV_BMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKV_BMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKV_BMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StepInfoKV_BMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKV_BMapEntry_DoNotUseDefaultTypeInternal _StepInfoKV_BMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKV::StepInfoKV(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.i_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.f_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.b_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StepInfoKVDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKVDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKVDefaultTypeInternal() {}
  union {
    StepInfoKV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKVDefaultTypeInternal _StepInfoKV_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKVInt::StepInfoKVInt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StepInfoKVIntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKVIntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKVIntDefaultTypeInternal() {}
  union {
    StepInfoKVInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKVIntDefaultTypeInternal _StepInfoKVInt_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKVString::StepInfoKVString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StepInfoKVStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKVStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKVStringDefaultTypeInternal() {}
  union {
    StepInfoKVString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKVStringDefaultTypeInternal _StepInfoKVString_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKVFloat::StepInfoKVFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StepInfoKVFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKVFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKVFloatDefaultTypeInternal() {}
  union {
    StepInfoKVFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKVFloatDefaultTypeInternal _StepInfoKVFloat_default_instance_;
PROTOBUF_CONSTEXPR StepInfoKVBool::StepInfoKVBool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StepInfoKVBoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoKVBoolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoKVBoolDefaultTypeInternal() {}
  union {
    StepInfoKVBool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoKVBoolDefaultTypeInternal _StepInfoKVBool_default_instance_;
PROTOBUF_CONSTEXPR StepInfo::StepInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_int_)*/{}
  , /*decltype(_impl_.data_str_)*/{}
  , /*decltype(_impl_.data_float_)*/{}
  , /*decltype(_impl_.data_bool_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StepInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StepInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StepInfoDefaultTypeInternal() {}
  union {
    StepInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StepInfoDefaultTypeInternal _StepInfo_default_instance_;
PROTOBUF_CONSTEXPR Space::Space(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.low_f_)*/{}
  , /*decltype(_impl_.high_f_)*/{}
  , /*decltype(_impl_.low_i_)*/{}
  , /*decltype(_impl_._low_i_cached_byte_size_)*/{0}
  , /*decltype(_impl_.high_i_)*/{}
  , /*decltype(_impl_._high_i_cached_byte_size_)*/{0}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dtype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.n_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpaceDefaultTypeInternal() {}
  union {
    Space _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpaceDefaultTypeInternal _Space_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR Observation::Observation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_f_)*/{}
  , /*decltype(_impl_.data_i_)*/{}
  , /*decltype(_impl_._data_i_cached_byte_size_)*/{0}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservationDefaultTypeInternal() {}
  union {
    Observation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservationDefaultTypeInternal _Observation_default_instance_;
PROTOBUF_CONSTEXPR Action::Action(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_f_)*/{}
  , /*decltype(_impl_._data_f_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_i_)*/{}
  , /*decltype(_impl_._data_i_cached_byte_size_)*/{0}
  , /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionDefaultTypeInternal _Action_default_instance_;
PROTOBUF_CONSTEXPR Transition::Transition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_observation_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.reward_)*/0
  , /*decltype(_impl_.done_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransitionDefaultTypeInternal() {}
  union {
    Transition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransitionDefaultTypeInternal _Transition_default_instance_;
PROTOBUF_CONSTEXPR RenderMode::RenderMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenderModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderModeDefaultTypeInternal() {}
  union {
    RenderMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderModeDefaultTypeInternal _RenderMode_default_instance_;
PROTOBUF_CONSTEXPR RenderOut::RenderOut(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rgb_)*/{}
  , /*decltype(_impl_._rgb_cached_byte_size_)*/{0}
  , /*decltype(_impl_.ansi_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenderOutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderOutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderOutDefaultTypeInternal() {}
  union {
    RenderOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderOutDefaultTypeInternal _RenderOut_default_instance_;
PROTOBUF_CONSTEXPR EnvSeed::EnvSeed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnvSeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvSeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvSeedDefaultTypeInternal() {}
  union {
    EnvSeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvSeedDefaultTypeInternal _EnvSeed_default_instance_;
static ::_pb::Metadata file_level_metadata_env_2eproto[22];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_env_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_env_2eproto = nullptr;

const uint32_t TableStruct_env_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _impl_.port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MetaData, _impl_.envversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Name, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Name, _impl_.wrapper_),
  PROTOBUF_FIELD_OFFSET(::Name, _impl_.render_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Info, _impl_.observation_space_),
  PROTOBUF_FIELD_OFFSET(::Info, _impl_.action_space_),
  PROTOBUF_FIELD_OFFSET(::Info, _impl_.max_episode_steps_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_SMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_SMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_SMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_SMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_IMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_IMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_IMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_IMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_FMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_FMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_FMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_FMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_BMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_BMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_BMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV_BMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StepInfoKV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKV, _impl_.s_map_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV, _impl_.i_map_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV, _impl_.f_map_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKV, _impl_.b_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StepInfoKVInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKVInt, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKVInt, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StepInfoKVString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKVString, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKVString, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StepInfoKVFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKVFloat, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKVFloat, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StepInfoKVBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfoKVBool, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::StepInfoKVBool, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StepInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StepInfo, _impl_.data_int_),
  PROTOBUF_FIELD_OFFSET(::StepInfo, _impl_.data_str_),
  PROTOBUF_FIELD_OFFSET(::StepInfo, _impl_.data_float_),
  PROTOBUF_FIELD_OFFSET(::StepInfo, _impl_.data_bool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Space, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.low_f_),
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.high_f_),
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.low_i_),
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.high_i_),
  PROTOBUF_FIELD_OFFSET(::Space, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Observation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Observation, _impl_.data_f_),
  PROTOBUF_FIELD_OFFSET(::Observation, _impl_.data_i_),
  PROTOBUF_FIELD_OFFSET(::Observation, _impl_.shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Action, _impl_.data_f_),
  PROTOBUF_FIELD_OFFSET(::Action, _impl_.data_i_),
  PROTOBUF_FIELD_OFFSET(::Action, _impl_.shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Transition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Transition, _impl_.next_observation_),
  PROTOBUF_FIELD_OFFSET(::Transition, _impl_.reward_),
  PROTOBUF_FIELD_OFFSET(::Transition, _impl_.done_),
  PROTOBUF_FIELD_OFFSET(::Transition, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RenderMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RenderMode, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RenderOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RenderOut, _impl_.rgb_),
  PROTOBUF_FIELD_OFFSET(::RenderOut, _impl_.ansi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnvSeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnvSeed, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ServerInfo)},
  { 8, -1, -1, sizeof(::MetaData)},
  { 15, -1, -1, sizeof(::Name)},
  { 24, -1, -1, sizeof(::Info)},
  { 33, 41, -1, sizeof(::StepInfoKV_SMapEntry_DoNotUse)},
  { 43, 51, -1, sizeof(::StepInfoKV_IMapEntry_DoNotUse)},
  { 53, 61, -1, sizeof(::StepInfoKV_FMapEntry_DoNotUse)},
  { 63, 71, -1, sizeof(::StepInfoKV_BMapEntry_DoNotUse)},
  { 73, -1, -1, sizeof(::StepInfoKV)},
  { 83, -1, -1, sizeof(::StepInfoKVInt)},
  { 91, -1, -1, sizeof(::StepInfoKVString)},
  { 99, -1, -1, sizeof(::StepInfoKVFloat)},
  { 107, -1, -1, sizeof(::StepInfoKVBool)},
  { 115, -1, -1, sizeof(::StepInfo)},
  { 125, -1, -1, sizeof(::Space)},
  { 140, -1, -1, sizeof(::Empty)},
  { 146, -1, -1, sizeof(::Observation)},
  { 155, -1, -1, sizeof(::Action)},
  { 164, -1, -1, sizeof(::Transition)},
  { 174, -1, -1, sizeof(::RenderMode)},
  { 181, -1, -1, sizeof(::RenderOut)},
  { 189, -1, -1, sizeof(::EnvSeed)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ServerInfo_default_instance_._instance,
  &::_MetaData_default_instance_._instance,
  &::_Name_default_instance_._instance,
  &::_Info_default_instance_._instance,
  &::_StepInfoKV_SMapEntry_DoNotUse_default_instance_._instance,
  &::_StepInfoKV_IMapEntry_DoNotUse_default_instance_._instance,
  &::_StepInfoKV_FMapEntry_DoNotUse_default_instance_._instance,
  &::_StepInfoKV_BMapEntry_DoNotUse_default_instance_._instance,
  &::_StepInfoKV_default_instance_._instance,
  &::_StepInfoKVInt_default_instance_._instance,
  &::_StepInfoKVString_default_instance_._instance,
  &::_StepInfoKVFloat_default_instance_._instance,
  &::_StepInfoKVBool_default_instance_._instance,
  &::_StepInfo_default_instance_._instance,
  &::_Space_default_instance_._instance,
  &::_Empty_default_instance_._instance,
  &::_Observation_default_instance_._instance,
  &::_Action_default_instance_._instance,
  &::_Transition_default_instance_._instance,
  &::_RenderMode_default_instance_._instance,
  &::_RenderOut_default_instance_._instance,
  &::_EnvSeed_default_instance_._instance,
};

const char descriptor_table_protodef_env_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tenv.proto\"&\n\nServerInfo\022\n\n\002ip\030\001 \001(\t\022\014\n"
  "\004port\030\002 \001(\005\"\036\n\010MetaData\022\022\n\nEnvVersion\030\001 "
  "\001(\t\":\n\004Name\022\014\n\004data\030\001 \001(\t\022\017\n\007wrapper\030\002 \003"
  "(\t\022\023\n\013render_mode\030\003 \001(\t\"b\n\004Info\022!\n\021obser"
  "vation_space\030\001 \003(\0132\006.Space\022\034\n\014action_spa"
  "ce\030\002 \003(\0132\006.Space\022\031\n\021max_episode_steps\030\003 "
  "\001(\005\"\330\002\n\nStepInfoKV\022$\n\005s_map\030\001 \003(\0132\025.Step"
  "InfoKV.SMapEntry\022$\n\005i_map\030\002 \003(\0132\025.StepIn"
  "foKV.IMapEntry\022$\n\005f_map\030\003 \003(\0132\025.StepInfo"
  "KV.FMapEntry\022$\n\005b_map\030\004 \003(\0132\025.StepInfoKV"
  ".BMapEntry\032+\n\tSMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\032+\n\tIMapEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\005:\0028\001\032+\n\tFMapEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\032+\n\tBMapEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010:\0028\001\"+\n\rStepIn"
  "foKVInt\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005\".\n\020S"
  "tepInfoKVString\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t\"-\n\017StepInfoKVFloat\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\002\",\n\016StepInfoKVBool\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\010\"\233\001\n\010StepInfo\022 \n\010data_in"
  "t\030\001 \003(\0132\016.StepInfoKVInt\022#\n\010data_str\030\002 \003("
  "\0132\021.StepInfoKVString\022$\n\ndata_float\030\003 \003(\013"
  "2\020.StepInfoKVFloat\022\"\n\tdata_bool\030\004 \003(\0132\017."
  "StepInfoKVBool\"\211\001\n\005Space\022\014\n\004type\030\001 \001(\t\022\r"
  "\n\005shape\030\002 \003(\005\022\r\n\005dtype\030\003 \001(\t\022\013\n\003key\030\004 \001("
  "\t\022\r\n\005low_f\030\005 \003(\002\022\016\n\006high_f\030\006 \003(\002\022\r\n\005low_"
  "i\030\007 \003(\005\022\016\n\006high_i\030\010 \003(\005\022\t\n\001n\030\t \001(\005\"\007\n\005Em"
  "pty\"<\n\013Observation\022\016\n\006data_f\030\001 \003(\002\022\016\n\006da"
  "ta_i\030\002 \003(\005\022\r\n\005shape\030\003 \003(\005\"7\n\006Action\022\016\n\006d"
  "ata_f\030\001 \003(\005\022\016\n\006data_i\030\002 \003(\005\022\r\n\005shape\030\003 \003"
  "(\005\"k\n\nTransition\022&\n\020next_observation\030\001 \001"
  "(\0132\014.Observation\022\016\n\006reward\030\002 \001(\002\022\014\n\004done"
  "\030\003 \001(\010\022\027\n\004info\030\004 \001(\0132\t.StepInfo\"\032\n\nRende"
  "rMode\022\014\n\004data\030\001 \001(\t\"&\n\tRenderOut\022\013\n\003rgb\030"
  "\001 \003(\005\022\014\n\004ansi\030\002 \001(\t\"\027\n\007EnvSeed\022\014\n\004data\030\001"
  " \001(\0052L\n\nEnvControl\022\036\n\005Start\022\006.Empty\032\013.Se"
  "rverInfo\"\000\022\036\n\005Close\022\013.ServerInfo\032\006.Empty"
  "\"\0002\370\001\n\003Env\022 \n\tHandshake\022\006.Empty\032\t.MetaDa"
  "ta\"\000\022\026\n\004Make\022\005.Name\032\005.Info\"\000\022\036\n\005Reset\022\006."
  "Empty\032\013.Transition\"\000\022\036\n\004Step\022\007.Action\032\013."
  "Transition\"\000\022#\n\006Render\022\013.RenderMode\032\n.Re"
  "nderOut\"\000\022\032\n\004Seed\022\010.EnvSeed\032\006.Empty\"\000\022\033\n"
  "\006Sample\022\006.Empty\032\007.Action\"\000\022\031\n\005Close\022\006.Em"
  "pty\032\006.Empty\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_env_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_env_2eproto = {
    false, false, 1741, descriptor_table_protodef_env_2eproto,
    "env.proto",
    &descriptor_table_env_2eproto_once, nullptr, 0, 22,
    schemas, file_default_instances, TableStruct_env_2eproto::offsets,
    file_level_metadata_env_2eproto, file_level_enum_descriptors_env_2eproto,
    file_level_service_descriptors_env_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_env_2eproto_getter() {
  return &descriptor_table_env_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_env_2eproto(&descriptor_table_env_2eproto);

// ===================================================================

class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:ServerInfo)
}

inline void ServerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:ServerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void ServerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerInfo.ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerInfo.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerInfo::GetClassData() const { return &_class_data_; }


void ServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerInfo*>(&to_msg);
  auto& from = static_cast<const ServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[0]);
}

// ===================================================================

class MetaData::_Internal {
 public:
};

MetaData::MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MetaData)
}
MetaData::MetaData(const MetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.envversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.envversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.envversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_envversion().empty()) {
    _this->_impl_.envversion_.Set(from._internal_envversion(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MetaData)
}

inline void MetaData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.envversion_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.envversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.envversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:MetaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.envversion_.Destroy();
}

void MetaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:MetaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.envversion_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string EnvVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_envversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MetaData.EnvVersion"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MetaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string EnvVersion = 1;
  if (!this->_internal_envversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_envversion().data(), static_cast<int>(this->_internal_envversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MetaData.EnvVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_envversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MetaData)
  return target;
}

size_t MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MetaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string EnvVersion = 1;
  if (!this->_internal_envversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_envversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetaData::GetClassData() const { return &_class_data_; }


void MetaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetaData*>(&to_msg);
  auto& from = static_cast<const MetaData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MetaData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_envversion().empty()) {
    _this->_internal_set_envversion(from._internal_envversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetaData::CopyFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  return true;
}

void MetaData::InternalSwap(MetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.envversion_, lhs_arena,
      &other->_impl_.envversion_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[1]);
}

// ===================================================================

class Name::_Internal {
 public:
};

Name::Name(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Name)
}
Name::Name(const Name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Name* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wrapper_){from._impl_.wrapper_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.render_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.render_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.render_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_render_mode().empty()) {
    _this->_impl_.render_mode_.Set(from._internal_render_mode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Name)
}

inline void Name::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wrapper_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.render_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.render_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.render_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:Name)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Name::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wrapper_.~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.render_mode_.Destroy();
}

void Name::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:Name)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wrapper_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.render_mode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Name::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Name.data"));
        } else
          goto handle_unusual;
        continue;
      // repeated string wrapper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wrapper();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Name.wrapper"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string render_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_render_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Name.render_mode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Name::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Name)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Name.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated string wrapper = 2;
  for (int i = 0, n = this->_internal_wrapper_size(); i < n; i++) {
    const auto& s = this->_internal_wrapper(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Name.wrapper");
    target = stream->WriteString(2, s, target);
  }

  // string render_mode = 3;
  if (!this->_internal_render_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_render_mode().data(), static_cast<int>(this->_internal_render_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Name.render_mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_render_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Name)
  return target;
}

size_t Name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Name)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string wrapper = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.wrapper_.size());
  for (int i = 0, n = _impl_.wrapper_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.wrapper_.Get(i));
  }

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string render_mode = 3;
  if (!this->_internal_render_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_render_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Name::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Name::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Name::GetClassData() const { return &_class_data_; }


void Name::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Name*>(&to_msg);
  auto& from = static_cast<const Name&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Name)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.wrapper_.MergeFrom(from._impl_.wrapper_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_render_mode().empty()) {
    _this->_internal_set_render_mode(from._internal_render_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {
  return true;
}

void Name::InternalSwap(Name* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.wrapper_.InternalSwap(&other->_impl_.wrapper_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.render_mode_, lhs_arena,
      &other->_impl_.render_mode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Name::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[2]);
}

// ===================================================================

class Info::_Internal {
 public:
};

Info::Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Info)
}
Info::Info(const Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.observation_space_){from._impl_.observation_space_}
    , decltype(_impl_.action_space_){from._impl_.action_space_}
    , decltype(_impl_.max_episode_steps_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.max_episode_steps_ = from._impl_.max_episode_steps_;
  // @@protoc_insertion_point(copy_constructor:Info)
}

inline void Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.observation_space_){arena}
    , decltype(_impl_.action_space_){arena}
    , decltype(_impl_.max_episode_steps_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.observation_space_.~RepeatedPtrField();
  _impl_.action_space_.~RepeatedPtrField();
}

void Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.observation_space_.Clear();
  _impl_.action_space_.Clear();
  _impl_.max_episode_steps_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Space observation_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observation_space(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Space action_space = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_action_space(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 max_episode_steps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.max_episode_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Space observation_space = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_observation_space_size()); i < n; i++) {
    const auto& repfield = this->_internal_observation_space(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Space action_space = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_action_space_size()); i < n; i++) {
    const auto& repfield = this->_internal_action_space(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 max_episode_steps = 3;
  if (this->_internal_max_episode_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_episode_steps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Info)
  return target;
}

size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Space observation_space = 1;
  total_size += 1UL * this->_internal_observation_space_size();
  for (const auto& msg : this->_impl_.observation_space_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Space action_space = 2;
  total_size += 1UL * this->_internal_action_space_size();
  for (const auto& msg : this->_impl_.action_space_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 max_episode_steps = 3;
  if (this->_internal_max_episode_steps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_episode_steps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Info::GetClassData() const { return &_class_data_; }


void Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Info*>(&to_msg);
  auto& from = static_cast<const Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.observation_space_.MergeFrom(from._impl_.observation_space_);
  _this->_impl_.action_space_.MergeFrom(from._impl_.action_space_);
  if (from._internal_max_episode_steps() != 0) {
    _this->_internal_set_max_episode_steps(from._internal_max_episode_steps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  return true;
}

void Info::InternalSwap(Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.observation_space_.InternalSwap(&other->_impl_.observation_space_);
  _impl_.action_space_.InternalSwap(&other->_impl_.action_space_);
  swap(_impl_.max_episode_steps_, other->_impl_.max_episode_steps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[3]);
}

// ===================================================================

StepInfoKV_SMapEntry_DoNotUse::StepInfoKV_SMapEntry_DoNotUse() {}
StepInfoKV_SMapEntry_DoNotUse::StepInfoKV_SMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StepInfoKV_SMapEntry_DoNotUse::MergeFrom(const StepInfoKV_SMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKV_SMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[4]);
}

// ===================================================================

StepInfoKV_IMapEntry_DoNotUse::StepInfoKV_IMapEntry_DoNotUse() {}
StepInfoKV_IMapEntry_DoNotUse::StepInfoKV_IMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StepInfoKV_IMapEntry_DoNotUse::MergeFrom(const StepInfoKV_IMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKV_IMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[5]);
}

// ===================================================================

StepInfoKV_FMapEntry_DoNotUse::StepInfoKV_FMapEntry_DoNotUse() {}
StepInfoKV_FMapEntry_DoNotUse::StepInfoKV_FMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StepInfoKV_FMapEntry_DoNotUse::MergeFrom(const StepInfoKV_FMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKV_FMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[6]);
}

// ===================================================================

StepInfoKV_BMapEntry_DoNotUse::StepInfoKV_BMapEntry_DoNotUse() {}
StepInfoKV_BMapEntry_DoNotUse::StepInfoKV_BMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StepInfoKV_BMapEntry_DoNotUse::MergeFrom(const StepInfoKV_BMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKV_BMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[7]);
}

// ===================================================================

class StepInfoKV::_Internal {
 public:
};

StepInfoKV::StepInfoKV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StepInfoKV::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:StepInfoKV)
}
StepInfoKV::StepInfoKV(const StepInfoKV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StepInfoKV* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.s_map_)*/{}
    , /*decltype(_impl_.i_map_)*/{}
    , /*decltype(_impl_.f_map_)*/{}
    , /*decltype(_impl_.b_map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.s_map_.MergeFrom(from._impl_.s_map_);
  _this->_impl_.i_map_.MergeFrom(from._impl_.i_map_);
  _this->_impl_.f_map_.MergeFrom(from._impl_.f_map_);
  _this->_impl_.b_map_.MergeFrom(from._impl_.b_map_);
  // @@protoc_insertion_point(copy_constructor:StepInfoKV)
}

inline void StepInfoKV::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.s_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.i_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.f_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.b_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StepInfoKV::~StepInfoKV() {
  // @@protoc_insertion_point(destructor:StepInfoKV)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StepInfoKV::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_map_.Destruct();
  _impl_.s_map_.~MapField();
  _impl_.i_map_.Destruct();
  _impl_.i_map_.~MapField();
  _impl_.f_map_.Destruct();
  _impl_.f_map_.~MapField();
  _impl_.b_map_.Destruct();
  _impl_.b_map_.~MapField();
}

void StepInfoKV::ArenaDtor(void* object) {
  StepInfoKV* _this = reinterpret_cast< StepInfoKV* >(object);
  _this->_impl_.s_map_.Destruct();
  _this->_impl_.i_map_.Destruct();
  _this->_impl_.f_map_.Destruct();
  _this->_impl_.b_map_.Destruct();
}
void StepInfoKV::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StepInfoKV::Clear() {
// @@protoc_insertion_point(message_clear_start:StepInfoKV)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_map_.Clear();
  _impl_.i_map_.Clear();
  _impl_.f_map_.Clear();
  _impl_.b_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepInfoKV::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> s_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.s_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> i_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.i_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, float> f_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.f_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bool> b_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.b_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepInfoKV::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StepInfoKV)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> s_map = 1;
  if (!this->_internal_s_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = StepInfoKV_SMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_s_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StepInfoKV.SMapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StepInfoKV.SMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int32> i_map = 2;
  if (!this->_internal_i_map().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = StepInfoKV_IMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_i_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StepInfoKV.IMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, float> f_map = 3;
  if (!this->_internal_f_map().empty()) {
    using MapType = ::_pb::Map<std::string, float>;
    using WireHelper = StepInfoKV_FMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_f_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StepInfoKV.FMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, bool> b_map = 4;
  if (!this->_internal_b_map().empty()) {
    using MapType = ::_pb::Map<std::string, bool>;
    using WireHelper = StepInfoKV_BMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_b_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StepInfoKV.BMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StepInfoKV)
  return target;
}

size_t StepInfoKV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StepInfoKV)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> s_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_s_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_s_map().begin();
      it != this->_internal_s_map().end(); ++it) {
    total_size += StepInfoKV_SMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> i_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_i_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_i_map().begin();
      it != this->_internal_i_map().end(); ++it) {
    total_size += StepInfoKV_IMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> f_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_f_map().begin();
      it != this->_internal_f_map().end(); ++it) {
    total_size += StepInfoKV_FMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bool> b_map = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_b_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_b_map().begin();
      it != this->_internal_b_map().end(); ++it) {
    total_size += StepInfoKV_BMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepInfoKV::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StepInfoKV::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepInfoKV::GetClassData() const { return &_class_data_; }


void StepInfoKV::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StepInfoKV*>(&to_msg);
  auto& from = static_cast<const StepInfoKV&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StepInfoKV)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.s_map_.MergeFrom(from._impl_.s_map_);
  _this->_impl_.i_map_.MergeFrom(from._impl_.i_map_);
  _this->_impl_.f_map_.MergeFrom(from._impl_.f_map_);
  _this->_impl_.b_map_.MergeFrom(from._impl_.b_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepInfoKV::CopyFrom(const StepInfoKV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StepInfoKV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepInfoKV::IsInitialized() const {
  return true;
}

void StepInfoKV::InternalSwap(StepInfoKV* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.s_map_.InternalSwap(&other->_impl_.s_map_);
  _impl_.i_map_.InternalSwap(&other->_impl_.i_map_);
  _impl_.f_map_.InternalSwap(&other->_impl_.f_map_);
  _impl_.b_map_.InternalSwap(&other->_impl_.b_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKV::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[8]);
}

// ===================================================================

class StepInfoKVInt::_Internal {
 public:
};

StepInfoKVInt::StepInfoKVInt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StepInfoKVInt)
}
StepInfoKVInt::StepInfoKVInt(const StepInfoKVInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StepInfoKVInt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:StepInfoKVInt)
}

inline void StepInfoKVInt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StepInfoKVInt::~StepInfoKVInt() {
  // @@protoc_insertion_point(destructor:StepInfoKVInt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StepInfoKVInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void StepInfoKVInt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StepInfoKVInt::Clear() {
// @@protoc_insertion_point(message_clear_start:StepInfoKVInt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepInfoKVInt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StepInfoKVInt.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepInfoKVInt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StepInfoKVInt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StepInfoKVInt.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StepInfoKVInt)
  return target;
}

size_t StepInfoKVInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StepInfoKVInt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepInfoKVInt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StepInfoKVInt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepInfoKVInt::GetClassData() const { return &_class_data_; }


void StepInfoKVInt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StepInfoKVInt*>(&to_msg);
  auto& from = static_cast<const StepInfoKVInt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StepInfoKVInt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepInfoKVInt::CopyFrom(const StepInfoKVInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StepInfoKVInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepInfoKVInt::IsInitialized() const {
  return true;
}

void StepInfoKVInt::InternalSwap(StepInfoKVInt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKVInt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[9]);
}

// ===================================================================

class StepInfoKVString::_Internal {
 public:
};

StepInfoKVString::StepInfoKVString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StepInfoKVString)
}
StepInfoKVString::StepInfoKVString(const StepInfoKVString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StepInfoKVString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StepInfoKVString)
}

inline void StepInfoKVString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StepInfoKVString::~StepInfoKVString() {
  // @@protoc_insertion_point(destructor:StepInfoKVString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StepInfoKVString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void StepInfoKVString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StepInfoKVString::Clear() {
// @@protoc_insertion_point(message_clear_start:StepInfoKVString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepInfoKVString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StepInfoKVString.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StepInfoKVString.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepInfoKVString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StepInfoKVString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StepInfoKVString.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StepInfoKVString.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StepInfoKVString)
  return target;
}

size_t StepInfoKVString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StepInfoKVString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepInfoKVString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StepInfoKVString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepInfoKVString::GetClassData() const { return &_class_data_; }


void StepInfoKVString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StepInfoKVString*>(&to_msg);
  auto& from = static_cast<const StepInfoKVString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StepInfoKVString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepInfoKVString::CopyFrom(const StepInfoKVString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StepInfoKVString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepInfoKVString::IsInitialized() const {
  return true;
}

void StepInfoKVString::InternalSwap(StepInfoKVString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKVString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[10]);
}

// ===================================================================

class StepInfoKVFloat::_Internal {
 public:
};

StepInfoKVFloat::StepInfoKVFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StepInfoKVFloat)
}
StepInfoKVFloat::StepInfoKVFloat(const StepInfoKVFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StepInfoKVFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:StepInfoKVFloat)
}

inline void StepInfoKVFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StepInfoKVFloat::~StepInfoKVFloat() {
  // @@protoc_insertion_point(destructor:StepInfoKVFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StepInfoKVFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void StepInfoKVFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StepInfoKVFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:StepInfoKVFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepInfoKVFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StepInfoKVFloat.key"));
        } else
          goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepInfoKVFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StepInfoKVFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StepInfoKVFloat.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StepInfoKVFloat)
  return target;
}

size_t StepInfoKVFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StepInfoKVFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // float value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepInfoKVFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StepInfoKVFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepInfoKVFloat::GetClassData() const { return &_class_data_; }


void StepInfoKVFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StepInfoKVFloat*>(&to_msg);
  auto& from = static_cast<const StepInfoKVFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StepInfoKVFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepInfoKVFloat::CopyFrom(const StepInfoKVFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StepInfoKVFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepInfoKVFloat::IsInitialized() const {
  return true;
}

void StepInfoKVFloat::InternalSwap(StepInfoKVFloat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKVFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[11]);
}

// ===================================================================

class StepInfoKVBool::_Internal {
 public:
};

StepInfoKVBool::StepInfoKVBool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StepInfoKVBool)
}
StepInfoKVBool::StepInfoKVBool(const StepInfoKVBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StepInfoKVBool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:StepInfoKVBool)
}

inline void StepInfoKVBool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StepInfoKVBool::~StepInfoKVBool() {
  // @@protoc_insertion_point(destructor:StepInfoKVBool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StepInfoKVBool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void StepInfoKVBool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StepInfoKVBool::Clear() {
// @@protoc_insertion_point(message_clear_start:StepInfoKVBool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepInfoKVBool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StepInfoKVBool.key"));
        } else
          goto handle_unusual;
        continue;
      // bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepInfoKVBool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StepInfoKVBool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StepInfoKVBool.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StepInfoKVBool)
  return target;
}

size_t StepInfoKVBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StepInfoKVBool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepInfoKVBool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StepInfoKVBool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepInfoKVBool::GetClassData() const { return &_class_data_; }


void StepInfoKVBool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StepInfoKVBool*>(&to_msg);
  auto& from = static_cast<const StepInfoKVBool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StepInfoKVBool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepInfoKVBool::CopyFrom(const StepInfoKVBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StepInfoKVBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepInfoKVBool::IsInitialized() const {
  return true;
}

void StepInfoKVBool::InternalSwap(StepInfoKVBool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepInfoKVBool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[12]);
}

// ===================================================================

class StepInfo::_Internal {
 public:
};

StepInfo::StepInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StepInfo)
}
StepInfo::StepInfo(const StepInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StepInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_int_){from._impl_.data_int_}
    , decltype(_impl_.data_str_){from._impl_.data_str_}
    , decltype(_impl_.data_float_){from._impl_.data_float_}
    , decltype(_impl_.data_bool_){from._impl_.data_bool_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StepInfo)
}

inline void StepInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_int_){arena}
    , decltype(_impl_.data_str_){arena}
    , decltype(_impl_.data_float_){arena}
    , decltype(_impl_.data_bool_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StepInfo::~StepInfo() {
  // @@protoc_insertion_point(destructor:StepInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StepInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_int_.~RepeatedPtrField();
  _impl_.data_str_.~RepeatedPtrField();
  _impl_.data_float_.~RepeatedPtrField();
  _impl_.data_bool_.~RepeatedPtrField();
}

void StepInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StepInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StepInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_int_.Clear();
  _impl_.data_str_.Clear();
  _impl_.data_float_.Clear();
  _impl_.data_bool_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .StepInfoKVInt data_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_int(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StepInfoKVString data_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_str(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StepInfoKVFloat data_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_float(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .StepInfoKVBool data_bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_bool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StepInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StepInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .StepInfoKVInt data_int = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_int_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_int(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .StepInfoKVString data_str = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_str_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_str(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .StepInfoKVFloat data_float = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_float_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_float(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .StepInfoKVBool data_bool = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_bool_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_bool(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StepInfo)
  return target;
}

size_t StepInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StepInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StepInfoKVInt data_int = 1;
  total_size += 1UL * this->_internal_data_int_size();
  for (const auto& msg : this->_impl_.data_int_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StepInfoKVString data_str = 2;
  total_size += 1UL * this->_internal_data_str_size();
  for (const auto& msg : this->_impl_.data_str_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StepInfoKVFloat data_float = 3;
  total_size += 1UL * this->_internal_data_float_size();
  for (const auto& msg : this->_impl_.data_float_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .StepInfoKVBool data_bool = 4;
  total_size += 1UL * this->_internal_data_bool_size();
  for (const auto& msg : this->_impl_.data_bool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StepInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StepInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StepInfo::GetClassData() const { return &_class_data_; }


void StepInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StepInfo*>(&to_msg);
  auto& from = static_cast<const StepInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StepInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_int_.MergeFrom(from._impl_.data_int_);
  _this->_impl_.data_str_.MergeFrom(from._impl_.data_str_);
  _this->_impl_.data_float_.MergeFrom(from._impl_.data_float_);
  _this->_impl_.data_bool_.MergeFrom(from._impl_.data_bool_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StepInfo::CopyFrom(const StepInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StepInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepInfo::IsInitialized() const {
  return true;
}

void StepInfo::InternalSwap(StepInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_int_.InternalSwap(&other->_impl_.data_int_);
  _impl_.data_str_.InternalSwap(&other->_impl_.data_str_);
  _impl_.data_float_.InternalSwap(&other->_impl_.data_float_);
  _impl_.data_bool_.InternalSwap(&other->_impl_.data_bool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[13]);
}

// ===================================================================

class Space::_Internal {
 public:
};

Space::Space(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Space)
}
Space::Space(const Space& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Space* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.low_f_){from._impl_.low_f_}
    , decltype(_impl_.high_f_){from._impl_.high_f_}
    , decltype(_impl_.low_i_){from._impl_.low_i_}
    , /*decltype(_impl_._low_i_cached_byte_size_)*/{0}
    , decltype(_impl_.high_i_){from._impl_.high_i_}
    , /*decltype(_impl_._high_i_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.n_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dtype().empty()) {
    _this->_impl_.dtype_.Set(from._internal_dtype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.n_ = from._impl_.n_;
  // @@protoc_insertion_point(copy_constructor:Space)
}

inline void Space::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.low_f_){arena}
    , decltype(_impl_.high_f_){arena}
    , decltype(_impl_.low_i_){arena}
    , /*decltype(_impl_._low_i_cached_byte_size_)*/{0}
    , decltype(_impl_.high_i_){arena}
    , /*decltype(_impl_._high_i_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){}
    , decltype(_impl_.dtype_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.n_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Space::~Space() {
  // @@protoc_insertion_point(destructor:Space)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Space::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedField();
  _impl_.low_f_.~RepeatedField();
  _impl_.high_f_.~RepeatedField();
  _impl_.low_i_.~RepeatedField();
  _impl_.high_i_.~RepeatedField();
  _impl_.type_.Destroy();
  _impl_.dtype_.Destroy();
  _impl_.key_.Destroy();
}

void Space::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Space::Clear() {
// @@protoc_insertion_point(message_clear_start:Space)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.low_f_.Clear();
  _impl_.high_f_.Clear();
  _impl_.low_i_.Clear();
  _impl_.high_i_.Clear();
  _impl_.type_.ClearToEmpty();
  _impl_.dtype_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.n_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Space::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Space.type"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Space.dtype"));
        } else
          goto handle_unusual;
        continue;
      // string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Space.key"));
        } else
          goto handle_unusual;
        continue;
      // repeated float low_f = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_low_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_low_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float high_f = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_high_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_high_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 low_i = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_low_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_low_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 high_i = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_high_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_high_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 n = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Space::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Space)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Space.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated int32 shape = 2;
  {
    int byte_size = _impl_._shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  // string dtype = 3;
  if (!this->_internal_dtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Space.dtype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dtype(), target);
  }

  // string key = 4;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Space.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  // repeated float low_f = 5;
  if (this->_internal_low_f_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_low_f(), target);
  }

  // repeated float high_f = 6;
  if (this->_internal_high_f_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_high_f(), target);
  }

  // repeated int32 low_i = 7;
  {
    int byte_size = _impl_._low_i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_low_i(), byte_size, target);
    }
  }

  // repeated int32 high_i = 8;
  {
    int byte_size = _impl_._high_i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_high_i(), byte_size, target);
    }
  }

  // int32 n = 9;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Space)
  return target;
}

size_t Space::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Space)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float low_f = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_low_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float high_f = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_high_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 low_i = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.low_i_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._low_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 high_i = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.high_i_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._high_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string dtype = 3;
  if (!this->_internal_dtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dtype());
  }

  // string key = 4;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 n = 9;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Space::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Space::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Space::GetClassData() const { return &_class_data_; }


void Space::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Space*>(&to_msg);
  auto& from = static_cast<const Space&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Space)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  _this->_impl_.low_f_.MergeFrom(from._impl_.low_f_);
  _this->_impl_.high_f_.MergeFrom(from._impl_.high_f_);
  _this->_impl_.low_i_.MergeFrom(from._impl_.low_i_);
  _this->_impl_.high_i_.MergeFrom(from._impl_.high_i_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_dtype().empty()) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Space::CopyFrom(const Space& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Space)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Space::IsInitialized() const {
  return true;
}

void Space::InternalSwap(Space* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  _impl_.low_f_.InternalSwap(&other->_impl_.low_f_);
  _impl_.high_f_.InternalSwap(&other->_impl_.high_f_);
  _impl_.low_i_.InternalSwap(&other->_impl_.low_i_);
  _impl_.high_i_.InternalSwap(&other->_impl_.high_i_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dtype_, lhs_arena,
      &other->_impl_.dtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.n_, other->_impl_.n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Space::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[14]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[15]);
}

// ===================================================================

class Observation::_Internal {
 public:
};

Observation::Observation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Observation)
}
Observation::Observation(const Observation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Observation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_f_){from._impl_.data_f_}
    , decltype(_impl_.data_i_){from._impl_.data_i_}
    , /*decltype(_impl_._data_i_cached_byte_size_)*/{0}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Observation)
}

inline void Observation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_f_){arena}
    , decltype(_impl_.data_i_){arena}
    , /*decltype(_impl_._data_i_cached_byte_size_)*/{0}
    , decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Observation::~Observation() {
  // @@protoc_insertion_point(destructor:Observation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Observation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_f_.~RepeatedField();
  _impl_.data_i_.~RepeatedField();
  _impl_.shape_.~RepeatedField();
}

void Observation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Observation::Clear() {
// @@protoc_insertion_point(message_clear_start:Observation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_f_.Clear();
  _impl_.data_i_.Clear();
  _impl_.shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Observation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float data_f = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_data_f(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 data_i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_data_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Observation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Observation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data_f = 1;
  if (this->_internal_data_f_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data_f(), target);
  }

  // repeated int32 data_i = 2;
  {
    int byte_size = _impl_._data_i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_data_i(), byte_size, target);
    }
  }

  // repeated int32 shape = 3;
  {
    int byte_size = _impl_._shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Observation)
  return target;
}

size_t Observation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Observation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data_f = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_f_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 data_i = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_i_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 shape = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Observation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Observation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Observation::GetClassData() const { return &_class_data_; }


void Observation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Observation*>(&to_msg);
  auto& from = static_cast<const Observation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Observation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_f_.MergeFrom(from._impl_.data_f_);
  _this->_impl_.data_i_.MergeFrom(from._impl_.data_i_);
  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Observation::CopyFrom(const Observation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observation::IsInitialized() const {
  return true;
}

void Observation::InternalSwap(Observation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_f_.InternalSwap(&other->_impl_.data_f_);
  _impl_.data_i_.InternalSwap(&other->_impl_.data_i_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Observation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[16]);
}

// ===================================================================

class Action::_Internal {
 public:
};

Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Action* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_f_){from._impl_.data_f_}
    , /*decltype(_impl_._data_f_cached_byte_size_)*/{0}
    , decltype(_impl_.data_i_){from._impl_.data_i_}
    , /*decltype(_impl_._data_i_cached_byte_size_)*/{0}
    , decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Action)
}

inline void Action::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_f_){arena}
    , /*decltype(_impl_._data_f_cached_byte_size_)*/{0}
    , decltype(_impl_.data_i_){arena}
    , /*decltype(_impl_._data_i_cached_byte_size_)*/{0}
    , decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:Action)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_f_.~RepeatedField();
  _impl_.data_i_.~RepeatedField();
  _impl_.shape_.~RepeatedField();
}

void Action::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_f_.Clear();
  _impl_.data_i_.Clear();
  _impl_.shape_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 data_f = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data_f(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data_f(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 data_i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_data_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data_f = 1;
  {
    int byte_size = _impl_._data_f_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_data_f(), byte_size, target);
    }
  }

  // repeated int32 data_i = 2;
  {
    int byte_size = _impl_._data_i_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_data_i(), byte_size, target);
    }
  }

  // repeated int32 shape = 3;
  {
    int byte_size = _impl_._shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data_f = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_f_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_f_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 data_i = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_i_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 shape = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }


void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Action*>(&to_msg);
  auto& from = static_cast<const Action&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Action)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_f_.MergeFrom(from._impl_.data_f_);
  _this->_impl_.data_i_.MergeFrom(from._impl_.data_i_);
  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_f_.InternalSwap(&other->_impl_.data_f_);
  _impl_.data_i_.InternalSwap(&other->_impl_.data_i_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[17]);
}

// ===================================================================

class Transition::_Internal {
 public:
  static const ::Observation& next_observation(const Transition* msg);
  static const ::StepInfo& info(const Transition* msg);
};

const ::Observation&
Transition::_Internal::next_observation(const Transition* msg) {
  return *msg->_impl_.next_observation_;
}
const ::StepInfo&
Transition::_Internal::info(const Transition* msg) {
  return *msg->_impl_.info_;
}
Transition::Transition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Transition)
}
Transition::Transition(const Transition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Transition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_observation_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.reward_){}
    , decltype(_impl_.done_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_next_observation()) {
    _this->_impl_.next_observation_ = new ::Observation(*from._impl_.next_observation_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::StepInfo(*from._impl_.info_);
  }
  ::memcpy(&_impl_.reward_, &from._impl_.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.done_) -
    reinterpret_cast<char*>(&_impl_.reward_)) + sizeof(_impl_.done_));
  // @@protoc_insertion_point(copy_constructor:Transition)
}

inline void Transition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_observation_){nullptr}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.reward_){0}
    , decltype(_impl_.done_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Transition::~Transition() {
  // @@protoc_insertion_point(destructor:Transition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.next_observation_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void Transition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transition::Clear() {
// @@protoc_insertion_point(message_clear_start:Transition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.next_observation_ != nullptr) {
    delete _impl_.next_observation_;
  }
  _impl_.next_observation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  ::memset(&_impl_.reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.done_) -
      reinterpret_cast<char*>(&_impl_.reward_)) + sizeof(_impl_.done_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Observation next_observation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_observation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool done = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .StepInfo info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Observation next_observation = 1;
  if (this->_internal_has_next_observation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::next_observation(this),
        _Internal::next_observation(this).GetCachedSize(), target, stream);
  }

  // float reward = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reward = this->_internal_reward();
  uint32_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_reward(), target);
  }

  // bool done = 3;
  if (this->_internal_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_done(), target);
  }

  // .StepInfo info = 4;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transition)
  return target;
}

size_t Transition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Observation next_observation = 1;
  if (this->_internal_has_next_observation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_observation_);
  }

  // .StepInfo info = 4;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // float reward = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reward = this->_internal_reward();
  uint32_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    total_size += 1 + 4;
  }

  // bool done = 3;
  if (this->_internal_done() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Transition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transition::GetClassData() const { return &_class_data_; }


void Transition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Transition*>(&to_msg);
  auto& from = static_cast<const Transition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Transition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_next_observation()) {
    _this->_internal_mutable_next_observation()->::Observation::MergeFrom(
        from._internal_next_observation());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::StepInfo::MergeFrom(
        from._internal_info());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_reward = from._internal_reward();
  uint32_t raw_reward;
  memcpy(&raw_reward, &tmp_reward, sizeof(tmp_reward));
  if (raw_reward != 0) {
    _this->_internal_set_reward(from._internal_reward());
  }
  if (from._internal_done() != 0) {
    _this->_internal_set_done(from._internal_done());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transition::CopyFrom(const Transition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transition::IsInitialized() const {
  return true;
}

void Transition::InternalSwap(Transition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transition, _impl_.done_)
      + sizeof(Transition::_impl_.done_)
      - PROTOBUF_FIELD_OFFSET(Transition, _impl_.next_observation_)>(
          reinterpret_cast<char*>(&_impl_.next_observation_),
          reinterpret_cast<char*>(&other->_impl_.next_observation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[18]);
}

// ===================================================================

class RenderMode::_Internal {
 public:
};

RenderMode::RenderMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RenderMode)
}
RenderMode::RenderMode(const RenderMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenderMode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RenderMode)
}

inline void RenderMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenderMode::~RenderMode() {
  // @@protoc_insertion_point(destructor:RenderMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void RenderMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenderMode::Clear() {
// @@protoc_insertion_point(message_clear_start:RenderMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RenderMode.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenderMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenderMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RenderMode.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenderMode)
  return target;
}

size_t RenderMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RenderMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenderMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderMode::GetClassData() const { return &_class_data_; }


void RenderMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenderMode*>(&to_msg);
  auto& from = static_cast<const RenderMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RenderMode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderMode::CopyFrom(const RenderMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RenderMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderMode::IsInitialized() const {
  return true;
}

void RenderMode::InternalSwap(RenderMode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[19]);
}

// ===================================================================

class RenderOut::_Internal {
 public:
};

RenderOut::RenderOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RenderOut)
}
RenderOut::RenderOut(const RenderOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenderOut* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rgb_){from._impl_.rgb_}
    , /*decltype(_impl_._rgb_cached_byte_size_)*/{0}
    , decltype(_impl_.ansi_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ansi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ansi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ansi().empty()) {
    _this->_impl_.ansi_.Set(from._internal_ansi(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RenderOut)
}

inline void RenderOut::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rgb_){arena}
    , /*decltype(_impl_._rgb_cached_byte_size_)*/{0}
    , decltype(_impl_.ansi_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ansi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ansi_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenderOut::~RenderOut() {
  // @@protoc_insertion_point(destructor:RenderOut)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rgb_.~RepeatedField();
  _impl_.ansi_.Destroy();
}

void RenderOut::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenderOut::Clear() {
// @@protoc_insertion_point(message_clear_start:RenderOut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rgb_.Clear();
  _impl_.ansi_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderOut::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 rgb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rgb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_rgb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ansi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ansi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RenderOut.ansi"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenderOut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RenderOut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 rgb = 1;
  {
    int byte_size = _impl_._rgb_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_rgb(), byte_size, target);
    }
  }

  // string ansi = 2;
  if (!this->_internal_ansi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ansi().data(), static_cast<int>(this->_internal_ansi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RenderOut.ansi");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ansi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RenderOut)
  return target;
}

size_t RenderOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RenderOut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 rgb = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.rgb_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rgb_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ansi = 2;
  if (!this->_internal_ansi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ansi());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenderOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderOut::GetClassData() const { return &_class_data_; }


void RenderOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenderOut*>(&to_msg);
  auto& from = static_cast<const RenderOut&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RenderOut)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rgb_.MergeFrom(from._impl_.rgb_);
  if (!from._internal_ansi().empty()) {
    _this->_internal_set_ansi(from._internal_ansi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderOut::CopyFrom(const RenderOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RenderOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderOut::IsInitialized() const {
  return true;
}

void RenderOut::InternalSwap(RenderOut* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rgb_.InternalSwap(&other->_impl_.rgb_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ansi_, lhs_arena,
      &other->_impl_.ansi_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderOut::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[20]);
}

// ===================================================================

class EnvSeed::_Internal {
 public:
};

EnvSeed::EnvSeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnvSeed)
}
EnvSeed::EnvSeed(const EnvSeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnvSeed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_ = from._impl_.data_;
  // @@protoc_insertion_point(copy_constructor:EnvSeed)
}

inline void EnvSeed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnvSeed::~EnvSeed() {
  // @@protoc_insertion_point(destructor:EnvSeed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvSeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnvSeed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvSeed::Clear() {
// @@protoc_insertion_point(message_clear_start:EnvSeed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvSeed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvSeed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnvSeed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->_internal_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnvSeed)
  return target;
}

size_t EnvSeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnvSeed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->_internal_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvSeed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnvSeed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvSeed::GetClassData() const { return &_class_data_; }


void EnvSeed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnvSeed*>(&to_msg);
  auto& from = static_cast<const EnvSeed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnvSeed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_data() != 0) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvSeed::CopyFrom(const EnvSeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnvSeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvSeed::IsInitialized() const {
  return true;
}

void EnvSeed::InternalSwap(EnvSeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvSeed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_env_2eproto_getter, &descriptor_table_env_2eproto_once,
      file_level_metadata_env_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ServerInfo*
Arena::CreateMaybeMessage< ::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MetaData*
Arena::CreateMaybeMessage< ::MetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::Name*
Arena::CreateMaybeMessage< ::Name >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Name >(arena);
}
template<> PROTOBUF_NOINLINE ::Info*
Arena::CreateMaybeMessage< ::Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Info >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKV_SMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::StepInfoKV_SMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKV_SMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKV_IMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::StepInfoKV_IMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKV_IMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKV_FMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::StepInfoKV_FMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKV_FMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKV_BMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::StepInfoKV_BMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKV_BMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKV*
Arena::CreateMaybeMessage< ::StepInfoKV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKV >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKVInt*
Arena::CreateMaybeMessage< ::StepInfoKVInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKVInt >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKVString*
Arena::CreateMaybeMessage< ::StepInfoKVString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKVString >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKVFloat*
Arena::CreateMaybeMessage< ::StepInfoKVFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKVFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfoKVBool*
Arena::CreateMaybeMessage< ::StepInfoKVBool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfoKVBool >(arena);
}
template<> PROTOBUF_NOINLINE ::StepInfo*
Arena::CreateMaybeMessage< ::StepInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StepInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Space*
Arena::CreateMaybeMessage< ::Space >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Space >(arena);
}
template<> PROTOBUF_NOINLINE ::Empty*
Arena::CreateMaybeMessage< ::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::Observation*
Arena::CreateMaybeMessage< ::Observation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Observation >(arena);
}
template<> PROTOBUF_NOINLINE ::Action*
Arena::CreateMaybeMessage< ::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::Transition*
Arena::CreateMaybeMessage< ::Transition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Transition >(arena);
}
template<> PROTOBUF_NOINLINE ::RenderMode*
Arena::CreateMaybeMessage< ::RenderMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenderMode >(arena);
}
template<> PROTOBUF_NOINLINE ::RenderOut*
Arena::CreateMaybeMessage< ::RenderOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RenderOut >(arena);
}
template<> PROTOBUF_NOINLINE ::EnvSeed*
Arena::CreateMaybeMessage< ::EnvSeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnvSeed >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
